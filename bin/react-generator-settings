#!/usr/bin/env node

const program = require('commander');
const chalk = require('chalk');
const Settings = require('../src/settings');

program
  .option('-v, --view-destination <destination>', 'Set view default destination')
  .option('-s, --store-destination <destination>', 'Set store default destination')
  .option('-c, --component-destination <destination>', 'Set component default destination')
  .option('-t, --template-path <destination>', 'Set default template directory')
  .option('-g, --global', 'Set global settings')
  .option('-l, --log', 'Log global or local settings depending on global flag')
  .parse(process.argv);

if (program.log) {
  console.log();

  if(program.global)
  {
    console.log(chalk.green('Global settings:'));
    Settings.logSettings(Settings.getSettings({}, true));
  }
  else
  {
    console.log(chalk.green('Local settings:'));
    Settings.logSettings(Settings.getLocalSettings());
  }

  process.exit(1);
}

const settings = {};

if (program.componentDestination) {
  settings['componentDestination'] = program.componentDestination;
}

if (program.tscomponentDestination) {
  settings['tscomponentDestination'] = program.tscomponentDestination;
}

if (program.pageDestination) {
  settings['pageDestination'] = program.pageDestination;
}

if (program.tspageDestination) {
  settings['tspageDestination'] = program.tspageDestination;
}

if (program.setupDestination) {
  settings['setupDestination'] = program.setupDestination;
}

if (program.storeDestination) {
  settings['storeDestination'] = program.storeDestination;
}

if (program.reduxDestination) {
  settings['reduxDestination'] = program.reduxDestination;
}

if (program.reduxModuleDestination) {
  settings['reduxModuleDestination'] = program.reduxModuleDestination;
}

if (program.servicesDestination) {
  settings['servicesDestination'] = program.servicesDestination;
}

if (program.configDestination) {
  settings['configDestination'] = program.configDestination;
}

if (program.requestDestination) {
  settings['requestDestination'] = program.requestDestination;
}

if (program.storageDestination) {
  settings['storageDestination'] = program.storageDestination;
}

if (program.serviceModuleDestination) {
  settings['serviceModuleDestination'] = program.serviceModuleDestination;
}

if (program.templatePath) {
  settings['templatePath'] = program.templatePath;
}

if(Object.keys(settings).length == 0)
{
  console.log();
  console.log(chalk.green(`Settings:`));
  Settings.logSettings(Settings.getSettings());
  process.exit(1);
}

if(program.global){
  Settings.setGlobalSettings(settings);
  console.log();
  console.log(chalk.green('Global settings updated:'));
  Settings.logSettings(Settings.getSettings({}, true));
}
else {
  const updatedSettings = Object.assign({}, Settings.getLocalSettings(), settings);
  Settings.setLocalSettings(updatedSettings);
  console.log();
  console.log(chalk.green('Local settings updated:'));
  Settings.logSettings(updatedSettings);
}


